modFit <- train(diagnosis ~ .,data=train.il,method="glm")
View(train.il)
View(training)
train.il <- training[,2:grep("^IL", names(training))]
train.il <- training[,c(2,grep("^IL", names(training)))]
View(train.il)
train.il <- training[,c(3,grep("^IL", names(training)))]
View(train.il)
head(training[2])
head(training[1])
train.il <- training[,c(1,grep("^IL", names(training)))]
View(train.il)
modFit <- train(diagnosis ~ .,data=train.il,method="glm")
modfit
modFit
modFit.p <- train(diagnosis ~ .,data=preProcValues,method="glm")
trainPC <- predict(preProcValues
)
trainPC <- predict(preProcValues)
trainPC <- predict(preProcValues)
trainPC <- predict(preProcValues,train.il)
train.il <- training[,c(1,grep("^IL", names(training)))]
preProcValues <- preProcess(train.il, method = "pca", thresh=0.8)
trainPC <- predict(preProcValues,train)
preProcValues <- preProcess(train.il[-1], method = "pca", thresh=0.8)
trainPC <- predict(preProcValues,train[-1])
preProcValues <- preProcess(train.il[,-1], method = "pca", thresh=0.8)
trainPC <- predict(preProcValues,train[,-1])
preProcValues
train.il <- training[,c(1,grep("^IL", names(training)))]
preProcValues <- preProcess(train.il[,-1], method = "pca", thresh=0.8)
trainPC <- predict(preProcValues,train.il[,-1])
modFit.p <- train(diagnosis ~ .,data=trainPC,method="glm")
modFit.p <- train(train.il$diagnosis ~ .,data=trainPC,method="glm")
modfit.p
modFit.p
test.il <- testing[,c(1,grep("^IL", names(testing)))]
testPC <- predict(preProcValues,test.il[,-1])
confusionMatrix(testing$diagnosis,predict(modFit,testPC))
View(test.il)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train.il <- training[,c(1,grep("^IL", names(training)))]
test.il <- testing[,c(1,grep("^IL", names(testing)))]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train.il <- training[,c(1,grep("^IL", names(training)))]
test.il <- testing[,c(1,grep("^IL", names(testing)))]
preProcValues <- preProcess(train.il[,-1], method = "pca", thresh=0.8)
trainPC <- predict(preProcValues,train.il[,-1])
testPC <- predict(preProcValues,test.il[,-1])
modFit <- train(diagnosis ~ .,data=train.il,method="glm")
# 0.6861681
modFit.p <- train(train.il$diagnosis ~ .,data=trainPC,method="glm")
# 0.7084427
confusionMatrix(testing$diagnosis,predict(modFit,testPC))
View(test.il)
testPC <- predict(preProcValues,test.il)
confusionMatrix(test.il$diagnosis,predict(modFit,testPC))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train.il <- training[,c(1,grep("^IL", names(training)))]
test.il <- testing[,c(1,grep("^IL", names(testing)))]
head(test.il)
head(train.il)
preProc <- preProcess(train.il[,-1], method = "pca", thresh=0.8)
trainPC <- predict(preProc,train.il[,-1])
View(trainPC)
modFit <- train(diagnosis ~ .,data=train.il,method="glm")
modFit.p <- train(train.il$diagnosis ~ .,data=trainPC,method="glm")
confusionMatrix(test.il$diagnosis,predict(modFit.p,testPC))
testPC <- predict(preProc,test.il[,-1])
confusionMatrix(test.il$diagnosis,predict(modFit.p,testPC))
confusionMatrix(test.il$diagnosis,predict(modFit,test.il))
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(pgmm)
library(rpart)
install.packages("ElemStatLearn")
install.packages("pgmm")
source('C:/Users/ab604/OneDrive/Coursera/machine_learning/quiz_3.R')
data(segmentationOriginal)
inTrain <- createDataPartition(segmentationOriginal$Case, p = 0.6, list=FALSE)
train <- segmentationOriginal[inTrain,]
test  <- segmentationOriginal[-inTrain,]
rpartTune <- train(Case~., data=train, method = "rpart")
test.p <- predict(rpartTune,test)
test.p
test.p <- predict(rpartTune,TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2 )
test.p <- predict(rpartTune,test)
test.p[ test$TotalIntenCh2 == 23,000]
test.p[,test$TotalIntenCh2 == 23,000]
test.p[test$TotalIntenCh2 == 23,000]
test.p(test$TotalIntenCh2 == 23,000)
test.p <- predict(rpartTune,test)
test.p <- predict(rpartTune,test[test$TotalIntenCh2 == 23,000])
test.p <- predict(rpartTune,test[test$TotalIntenCh2 = 23,000])
plot(rpartTune$finalModel)
text(rpartTune$finalModel)
plot(rpartTune)
text(rpartTune)
plot(rpartTune$finalModel)
text(rpartTune)
text(rpartTune$finalModel)
?segmentationOriginal
rpartTune
test.p <- predict(rpartTune,test$Case)
test.p <- predict(rpartTune,test$Case)
test.p <- predict(rpartTune$finalModel,test$Case)
test.p <- predict(rpartTune$finalModel,test)
test.p <- predict(rpartTune,test)
str(test.p)
dim(test.p)
rpartTune <- train(Class~., data=train, method = "rpart")
plot(rpartTune$finalModel)
text(rpartTune$finalModel)
test.p <- predict(rpartTune,test)
inTrain <- createDataPartition(segmentationOriginal$Case, p = 0.6, list=FALSE)
train <- segmentationOriginal[inTrain,]
test  <- segmentationOriginal[-inTrain,]
set.seed(125)
rpartTune <- train(Class~., data=train, method = "rpart")
plot(rpartTune$finalModel)
text(rpartTune$finalModel)
test.p <- predict(rpartTune,test)
train <- segmentationOriginal[, Case == Train]
train <- segmentationOriginal[, segmentationOriginal$Case == Train]
train <- segmentationOriginal[, segmentationOriginal$Case == 'Train']
test  <- segmentationOriginal[, segmentationOriginal$Case == 'Test']
train <- segmentationOriginal[segmentationOriginal$Case == 'Train',]
test  <- segmentationOriginal[segmentationOriginal$Case == 'Test',]
set.seed(125)
rpartTune <- train(Class~., data=train, method = "rpart")
plot(rpartTune$finalModel)
text(rpartTune$finalModel)
test.p <- predict(rpartTune,test)
test.p(test$TotalIntenCh2 == 23,000)
test.p[test$TotalIntenCh2 == 23,000)]
test.p[test$TotalIntenCh2 == 23,000]
test.p[,test$TotalIntenCh2 == 23,000]
rpartTune
newdata.example <- make.obs(c(TotalIntenStatusCh3 = 3, FiberWidthCh1 = 20, VarIntenCh4 = 100))
predict(rpartTune, newdata=newdata.example)
# make named vector of NA values and column names from training set
all.columns <- mapply(function(x) NA, names(training), USE.NAMES = T)
make.obs <- function(repl){
# replace NAs in all.columns with data from repl and return as data.frame
data.frame(t(replace(all.columns, names(repl), repl)))
}
newdata.example <- make.obs(c(TotalIntenStatusCh3 = 3, FiberWidthCh1 = 20, VarIntenCh4 = 100))
predict(rpartTune, newdata=newdata.example)
all.columns <- mapply(function(x) NA, names(train), USE.NAMES = T)
make.obs <- function(repl){
# replace NAs in all.columns with data from repl and return as data.frame
data.frame(t(replace(all.columns, names(repl), repl)))
}
newdata.example <- make.obs(c(TotalIntenStatusCh3 = 3, FiberWidthCh1 = 20, VarIntenCh4 = 100))
predict(rpartTune, newdata=newdata.example)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(rpartTune)
fancyRpartPlot(rpartTune$finalModel)
library(rattle)
fancyRpartPlot(rpartTune$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(rpartTune$finalModel)
install.packages(c("base64enc", "car", "crayon", "curl", "dendextend", "downloader", "evaluate", "foreign", "git2r", "gridExtra", "httpuv", "knitr", "lme4", "nlme", "quantreg", "R6", "Rcpp", "rJava", "RMySQL", "rversions", "SparseM", "UsingR", "vcd"))
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(rattle)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(olive)
olive = olive[,-1]
rpart.3 <- train(Area~.data=olive, method="rpart")
rpart.3 <- train(Area~.,data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
newdata
pred.3 <- predict(rpart.3, newdata)
pred.3
fancyRpartPlot(rpart.3$finalModel)
str(olive)
?olive
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
?SAheart
logFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=train,
method="glm",family="binomial")
str(train)
logFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ld, data=trainSA,
method="glm",family="binomial")
str(trainSA)
logFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA,
method="glm",family="binomial")
logFit <- train(as.factor(chd) ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA,
method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
miissClass(logFit)
missClass(logFit)
pred.4 <- predict(logFit,testSA)
missClass(pred.4)
pred.4.train <- predict(logFit,trainSA)
pred.4.test <- predict(logFit,testSA)
missClass(trainsA$chd,pred.4)
logFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl,
data=trainSA,method="glm",family="binomial")
pred.4.train <- predict(logFit,trainSA)
pred.4.test <- predict(logFit,testSA)
missClass(trainsA$chd,pred.4)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl,
data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1)
!= values)/length(values)}
pred.4.train <- predict(logFit,trainSA)
pred.4.test <- predict(logFit,testSA)
missClass(trainsA$chd,pred.4)
missClass(pred.4.train,trainSA$chd)
missClass(trainSA$chd,pred.4.train)
missClass(testSA$chd,pred.4.test)
logFit <- train(as.factor(chd) ~ age+alcohol+obesity+tobacco+typea+ldl,
data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1)
!= values)/length(values)}
pred.4.train <- predict(logFit,trainSA)
pred.4.test <- predict(logFit,testSA)
missClass(trainSA$chd,pred.4.train)
missClass(testSA$chd,pred.4.test)
missClass(as.factor(trainSA$chd),pred.4.train)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl,
data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1)
!= values)/length(values)}
pred.4.train <- predict(logFit,trainSA)
pred.4.test <- predict(logFit,testSA)
missClass(trainSA$chd,pred.4.train)
missClass(testSA$chd,pred.4.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
rfModel <- train(y~.,data=vowel.train,method="rf")
set.seed(33833)
rfModel <- train(y~.,data=vowel.train,method="rf")
varImp(rfModel)
library(installr)
updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
library(installr)
updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
install.packages(c("foreign", "manipulate", "nlme"))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfModel.2 <- train(diagnosis~.,data=training,method="rf")
set.seed(62433)
gbmModel.2 <- train(diagnosis~.,data=training,method="gbm",
verbose=FALSE)
set.seed(62433)
ldaModel.2 <- train(diagnosis~.,data=training,method="lda")
pred.rf.2 <- predict(rfModel.2, testing)
pred.gbm.2 <- predict(gbmModel.2, testing)
pred.lda.2 <- predict(ldaModel.2, testing)
predDF.2 <- data.frame(pred.rf.2,pred.gbm.2,pred.lda.2,
diagnosis=testing$diagnosis)
combMod.2 <- train(diagnosis~.,predDF.2, method = "rf")
pred.com.2 <- predict(combMod.2, testing)
# Combined
cb <- round(confusionMatrix(testing$diagnosis,pred.com.2)$overall[1],3)
# RF
rf <- round(confusionMatrix(testing$diagnosis,pred.rf.2)$overall[1],3)
# GBM
gb <- round(confusionMatrix(testing$diagnosis,pred.gbm.2)$overall[1],3)
# LDA
ld <- round(confusionMatrix(testing$diagnosis,pred.lda.2)$overall[1],3)
mods <- data.frame(cb=cb,rf=rf,gb=gb,ld=ld)
sort(mods,decreasing =T)
setwd("test")
dir()
fileUrl <- "https://raw.githubusercontent.com/ab604/heatmap/master/leanne_testdata.csv"
if(!file.exists("leanne_testdata.csv")){
download.file(fileUrl,destfile="leanne_testdata.csv")
dateDownloaded <- date()
log_con <- file("testdata_download.log")
cat (fileUrl,"\n","destfile= leanne_testdata.csv",
"\n","destdir =", getwd(),"\n",dateDownloaded,
file = log_con)
close(log_con)
}
cols <- c("","Control.1","Control.2","Control.3","Treated.1",
"Treated.2","Treated.3","Ttest")
# Load data, re-naming columns and taking column 1 for row names.
dat <- read.csv("leanne_testdata.csv", row.names = 1,
stringsAsFactors = FALSE, col.names = cols, header = TRUE)
View(dat)
dat <- read.csv("secretome_t_test_significant.csv")
View(dat)
head(dat)
install.packages("shiny")
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
install.packages(c("car", "class", "CORElearn", "curl", "data.table", "devtools", "dplyr", "evaluate", "formatR", "highr", "Hmisc", "installr", "jsonlite", "MASS", "MatrixModels", "mime", "nnet", "partykit", "quantreg", "Rcpp", "RcppEigen", "rmarkdown", "RMySQL", "rpart.plot", "scales", "spatial", "tidyr", "xml2"))
library(shiny)
require(devtools)
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
library(rCharts)
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
graph_chart1.addHandler(function(type, e){
var data = e.evtData;
if (type === 'click'){
return alert("You clicked on car with mpg: " + data.mpg.in[0]);
}
})
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
getwd()
setwd("developing_data_products/")
dir()
setwd("dilution_calculator/")
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('C:/Users/ab604/OneDrive/Coursera/developing_data_products/dilution_calculator/mass_molarity.R', echo=TRUE)
mass.molarity(372.24,10^-3,0.1)
source('C:/Users/ab604/OneDrive/Coursera/developing_data_products/dilution_calculator/mass_molarity.R', echo=TRUE)
mass.molarity(372.24,10^-3,0.1)
mass.molarity(372.24,10*10^-3,0.1)
shiny::runApp()
install.packages("flowVis")
source("https://bioconductor.org/biocLite.R")
biocLite("flowViz")
source('C:/Users/ab604/OneDrive/Coursera/developing_data_products/dilution_calculator/solution_dilution.R', echo=TRUE)
solution.dilution(0.5,5e-3,0.1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(slidify)
library(slidifyLibraries)
author("biochem_calculator")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
<a "molar concentration",href="https://en.wikipedia.org/wiki/Molar_concentration", target="_blank">
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
